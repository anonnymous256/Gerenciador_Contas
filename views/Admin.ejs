<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Gerenciamento de Usuários</title>
  <style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Poppins', sans-serif;
        background-color: #f9fafb;
        color: #333;
        line-height: 1.6;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        margin: 0;
    }

    .container {
        max-width: 600px;
        width: 100%;
        padding: 40px;
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 3px 5px rgba(0, 0, 0, 0.5);
        border: 1px solid rgba(0, 0, 0, 0.3);
        text-align: center;
    }

    h1 {
        font-size: 2rem;
        color: #2c3e50;
        margin-bottom: 20px;
        font-weight: 700;
    }

    form {
        display: flex;
        flex-direction: column;
    }

    input, select, button {
        margin: 10px 0;
        padding: 12px;
        border: 1px solid rgba(0, 0, 0, 0.3);
        border-radius: 10px;
        font-size: 1rem;
        outline: none;
        transition: border-color 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
    }

    input:focus, select:focus {
        border-color: #0D4376; /* Substituído */
        box-shadow: 0 0 5px rgba(13, 67, 118, 0.5); /* Substituído */
    }

    button {
        background-color: #0D4376; /* Substituído */
        color: white;
        cursor: pointer;
        border: none;
        transition: background 0.3s;
        border: 2px #0D4376 solid; /* Substituído */
    }

    button:hover {
        background-color: transparent;
        color: #0D4376; /* Substituído */
        border: 2px #0D4376 solid; /* Substituído */
    }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

    th, td {
        padding: 10px;
        border: 1px solid rgba(0, 0, 0, 0.3);
        text-align: left;
    }

    th {
        background-color: #f8f9fa;
        font-weight: 600;
    }

    .hidden {
        display: none;
    }

    .error-message {
        color: #e74c3c;
        text-align: center;
        margin-top: 10px;
        font-size: 0.9rem;
    }

    @media screen and (max-width: 768px) {
        body {
            padding: 20px;
        }

        .container {
            padding: 20px;
        }

        h1 {
            font-size: 1.8rem;
        }

        input, select, button {
            padding: 10px;
            font-size: 0.9rem;
        }
    }
  </style>
</head>
<body>
  <div class="container">
    <!-- Tela de Login -->
    <div id="login-screen">
      <h1>Login</h1>
      <form id="login-form">
        <input type="email" id="email" placeholder="Email" required autocomplete="username">
        <input type="password" id="password" placeholder="Senha" required autocomplete="current-password">
        <button type="submit">Entrar</button>
        <div id="error-message" class="error-message hidden"></div>
      </form>
    </div>

    <!-- Tela de Gerenciamento -->
    <div id="management-screen" class="hidden">
      <h1>Gerenciamento de Usuários</h1>
      <table id="users-table">
        <thead>
          <tr>
            <th>Nome</th>
            <th>Email</th>
            <th>Status</th>
            <th>Ações</th>
          </tr>
        </thead>
        <tbody>
          <!-- Linhas serão preenchidas dinamicamente -->
        </tbody>
      </table>
    </div>
  </div>

  
  <script src="https://www.gstatic.com/firebasejs/9.6.10/firebase-app-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.6.10/firebase-firestore-compat.js"></script>
  <script>
    // Configuração do Firebase
    const firebaseConfig = {
      apiKey: "AIzaSyCGf-lc7B3bWjUa1rXmYHXLMK5z-eKrNCU",
      authDomain: "allenbeauty.firebaseapp.com",
      projectId: "allenbeauty",
      storageBucket: "allenbeauty.appspot.com",
      messagingSenderId: "347722299020",
      appId: "1:347722299020:web:1e946417d954bebe5d6da9",
      measurementId: "G-CWM27YKX8C"
    };

    // Inicializar Firebase
    const app = firebase.initializeApp(firebaseConfig);
    const db = firebase.firestore();

    // Referências aos elementos do DOM
    const loginScreen = document.getElementById('login-screen');
    const managementScreen = document.getElementById('management-screen');
    const loginForm = document.getElementById('login-form');
    const usersTableBody = document.querySelector('#users-table tbody');
    const errorMessage = document.getElementById('error-message');

    // Função para carregar usuários
    const loadUsers = async () => {
      const usersSnapshot = await db.collection('users').get();
      usersTableBody.innerHTML = ''; 
      usersSnapshot.forEach(doc => {
        const user = doc.data();
        const row = `
          <tr>
            <td>${user.name}</td>
            <td>${user.email}</td>
            <td>${user.status}</td>
            <td>
              <select onchange="updateStatus('${doc.id}', this.value)">
                <option value="ativado" ${user.status === 'ativado' ? 'selected' : ''}>Ativado</option>
                <option value="desativado" ${user.status === 'desativado' ? 'selected' : ''}>Desativado</option>
              </select>
            </td>
          </tr>
        `;
        usersTableBody.innerHTML += row;
      });
    };

    // Função para atualizar o status do usuário
    window.updateStatus = async (userId, status) => {
      await db.collection('users').doc(userId).update({ status });
      alert('Status atualizado com sucesso!');
      loadUsers(); 
    };

    // Função para verificar o tipo de usuário
    const checkUserType = async (email) => {
      const usersSnapshot = await db.collection('users').where('email', '==', email).get();
      if (usersSnapshot.empty) {
        throw new Error('Usuário não encontrado');
      }
      const user = usersSnapshot.docs[0].data();
      return user.tipo_user.trim().toLowerCase(); 
    };

    // Simular login 
    loginForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      const email = document.getElementById('email').value;
      const password = document.getElementById('password').value;

      try {
        const userType = await checkUserType(email);

        if (userType === 'admin') {
          loginScreen.classList.add('hidden');
          managementScreen.classList.remove('hidden');
          loadUsers();
        } else {
          errorMessage.textContent = 'Apenas administradores podem fazer login.';
          errorMessage.classList.remove('hidden');
        }
      } catch (error) {
        errorMessage.textContent = error.message;
        errorMessage.classList.remove('hidden');
      }
    });
  </script>
</body>
</html>